name: CI/CD Pipeline

on:
  push:
    branches: [ "master", "develop" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
     image_tag: ${{ steps.return_docker_image_tag.outputs.docker_image_tag }}

    steps:
      # 1. Checkout
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Define image tag
        run: |
          if [ "${GITHUB_REF_NAME}" == 'master' ]; then
            echo 'DOCKER_IMAGE_TAG=latest' >> $GITHUB_ENV
          else
            echo 'DOCKER_IMAGE_TAG=dev' >> $GITHUB_ENV
          fi

      # 2. Install .NET SDK
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      # 3. Build
      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Run tests
        run: dotnet test --configuration Release --verbosity normal

      # 4. DockerHub login
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 5. Docker Image Build and Push
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Docker/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/simpleapi:${{ env.DOCKER_IMAGE_TAG }}

      # 6. Return docker image tag for next job
      - name: Return docker image tag
        id: return_docker_image_tag
        run: echo "docker_image_tag=${DOCKER_IMAGE_TAG}" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to server
    runs-on: self-hosted
    needs: build 
    if: ${{ github.ref_name == 'master' }}

    defaults:
      run:
        shell: bash

    steps:
    - name: Pull latest image
      shell: PowerShell
      run: docker pull ${{ secrets.DOCKERHUB_USERNAME }}/simpleapi:${{ needs.build.outputs.image_tag }}

    - name: Stop old container
      run: docker stop simpleapi || true

    - name: Remove old container
      run: docker rm simpleapi || true

    - name: Run new container
      run: docker run -d --name simpleapi -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/simpleapi:${{ needs.build.outputs.image_tag }}
